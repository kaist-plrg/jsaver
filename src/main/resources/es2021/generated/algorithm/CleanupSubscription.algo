def CleanupSubscription(subscription) = 1:{
  1:let cleanup = subscription.Cleanup
  2:if (= cleanup undefined) 2:return undefined else 2:{}
  3:app __x0__ = (IsCallable cleanup)
  3:assert (= __x0__ true)
  4:subscription.Cleanup = undefined
  5:app __x1__ = (Call cleanup undefined (new []))
  5:let result = __x1__
  6:app __x2__ = (IsAbruptCompletion result)
  6:if __x2__ 6:{
    6:app __x3__ = (HostReportErrors (new [result.Value]))
    6:__x3__
  } else 6:{}
  7:return undefined
}
- id: "cleanup-subscription"
- code:
            1. Assert: _subscription_ is a Subscription object.
            1. Let _cleanup_ be the value of _subscription_'s [[Cleanup]] internal slot.
            1. If _cleanup_ is *undefined*, return *undefined*.
            1. Assert: IsCallable(_cleanup_) is *true*.
            1. Set _subscription_'s [[Cleanup]] internal slot to *undefined*.
            1. Let _result_ be Call(_cleanup_, *undefined*, « »).
            1. If _result_ is an abrupt completion, perform HostReportErrors(« _result_.[[Value]] »).
            1. Return *undefined*.