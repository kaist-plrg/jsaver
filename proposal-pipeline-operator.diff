diff --git a/spec.html b/spec.html
index 1f269b0..c4f1e28 100644
--- a/spec.html
+++ b/spec.html
@@ -7504,6 +7504,9 @@
         LogicalORExpression :
           LogicalORExpression `||` LogicalANDExpression
 
+        PipelineExpression :
+          PipelineExpression `|>` LogicalORExpression
+
         CoalesceExpression :
           CoalesceExpressionHead `??` BitwiseORExpression
 
@@ -16898,8 +16901,12 @@
         CoalesceExpression[?In, ?Yield, ?Await]
         BitwiseORExpression[?In, ?Yield, ?Await]
 
-      ShortCircuitExpression[In, Yield, Await] :
+      PipelineExpression[In, Yield, Await] :
         LogicalORExpression[?In, ?Yield, ?Await]
+        PipelineExpression[?In, ?Yield, ?Await] `|>` LogicalORExpression[?In, ?Yield, ~Await]
+
+      ShortCircuitExpression[In, Yield, Await] :
+        PipelineExpression[?In, ?Yield, ?Await]
         CoalesceExpression[?In, ?Yield, ?Await]
     </emu-grammar>
     <emu-note>
@@ -16935,6 +16942,30 @@
           1. Return ? GetValue(_rref_).
         1. Otherwise, return _lval_.
       </emu-alg>
+      <emu-grammar>PipelineExpression : PipelineExpression `|>` LogicalORExpression</emu-grammar>
+      <emu-alg>
+        1. Let _argRef_ be the result of evaluating |PipelineExpression|.
+        1. Let _arg_ be ? GetValue(_argRef_).
+        1. Let _funcRef_ be the result of evaluating |LogicalORExpression|.
+        1. Let _func_ be ? GetValue(_funcRef_).
+        1. If Type(_funcRef_) is a Reference Record, then
+          1. If IsPropertyReference(_funcRef_) is *true*, then
+            1. Let _thisValue_ be GetThisValue(_funcRef_).
+          1. Else the base of _funcRef_ is an Environment Record,
+            1. Let _refEnv_ be _funcRef_.[[Base]].
+            1. Let _thisValue_ be _refEnv_.WithBaseObject().
+        1. Else,
+          1. Let _thisValue_ be *undefined*.
+        1. If Type(_func_) is not Object, throw a *TypeError* exception.
+        1. If IsCallable(_func_) is *false*, throw a *TypeError* exception.
+        1. Let _thisCall_ be this |PipelineExpression|.
+        1. Let _tailPosition_ be IsInTailPosition(_thisCall_).
+        1. If _tailPosition_ is *true*, perform PrepareForTailCall().
+        1. Let _result_ be Call(_func_, _thisValue_, &laquo; _arg_ &raquo;).
+        1. Assert: If _tailPosition_ is *true*, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.
+        1. Assert: If _result_ is not an abrupt completion, then Type(_result_) is an ECMAScript language type.
+        1. Return _result_.
+      </emu-alg>
     </emu-clause>
   </emu-clause>
 
@@ -21386,6 +21417,11 @@
         <emu-alg>
           1. Return HasCallInTailPosition of |BitwiseORExpression| with argument _call_.
         </emu-alg>
+        <emu-grammar>PipelineExpression : PipelineExpression `|>` LogicalORExpression</emu-grammar>
+        <emu-alg>
+          1. If this |PipelineExpression| is _call_, return *true*.
+          1. Return *false*.
+        </emu-alg>
         <emu-grammar>LogicalORExpression : LogicalORExpression `||` LogicalANDExpression</emu-grammar>
         <emu-alg>
           1. Return HasCallInTailPosition of |LogicalANDExpression| with argument _call_.
